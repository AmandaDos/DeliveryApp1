import { Injectable, ConflictException, UnauthorizedException, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import * as bcrypt from 'bcrypt';

import { User, UserRole, UserStatus } from '../../entities/user.entity';
import { Courier, VehicleType } from '../../entities/courier.entity';
import { RegisterDto } from './dto/register.dto';
import { LoginDto } from './dto/login.dto';
import { AuthResponseDto } from './dto/auth-response.dto';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(Courier)
    private readonly courierRepository: Repository<Courier>,
    private readonly jwtService: JwtService,
    private readonly configService: ConfigService,
  ) {}

  async register(registerDto: RegisterDto): Promise<AuthResponseDto> {
    const { email, phone, password, name, vehicle_type } = registerDto;

    // Check if user already exists
    const existingUser = await this.userRepository.findOne({
      where: [{ email }, { phone }],
    });

    if (existingUser) {
      throw new ConflictException('User with this email or phone already exists');
    }

    // Create user
    const user = this.userRepository.create({
      email,
      phone,
      name,
      password_hash: password,
      role: UserRole.COURIER,
      status: UserStatus.ACTIVE,
    });

    const savedUser = await this.userRepository.save(user);

    // Create courier profile
    const courier = this.courierRepository.create({
      user_id: savedUser.id,
      vehicle_type: vehicle_type || VehicleType.BICYCLE,
    });

    await this.courierRepository.save(courier);

    // Generate tokens
    const tokens = await this.generateTokens(savedUser);

    return {
      user: this.sanitizeUser(savedUser),
      ...tokens,
    };
  }

  async login(loginDto: LoginDto): Promise<AuthResponseDto> {
    const { email, password } = loginDto;

    // Find user with courier relation
    const user = await this.userRepository.findOne({
      where: { email },
      relations: ['courier'],
    });

    if (!user || !user.isActive) {
      throw new UnauthorizedException('Invalid credentials');
    }

    // Validate password
    const isPasswordValid = await user.validatePassword(password);
    if (!isPasswordValid) {
      throw new UnauthorizedException('Invalid credentials');
    }

    // Update last login
    user.last_login_at = new Date();
    await this.userRepository.save(user);

    // Generate tokens
    const tokens = await this.generateTokens(user);

    return {
      user: this.sanitizeUser(user),
      ...tokens,
    };
  }

  async refreshToken(refreshToken: string): Promise<{ access_token: string }> {
    try {
      const payload = this.jwtService.verify(refreshToken, {
        secret: this.configService.get('JWT_REFRESH_SECRET'),
      });

      const user = await this.userRepository.findOne({
        where: { id: payload.sub },
      });

      if (!user || !user.isActive) {
        throw new UnauthorizedException('Invalid refresh token');
      }

      const access_token = this.jwtService.sign(
        { sub: user.id, email: user.email, role: user.role },
        {
          secret: this.configService.get('JWT_SECRET'),
          expiresIn: this.configService.get('JWT_EXPIRES_IN', '15m'),
        },
      );

      return { access_token };
    } catch (error) {
      throw new UnauthorizedException('Invalid refresh token');
    }
  }

  async validateUser(userId: string): Promise<User | null> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
      relations: ['courier'],
    });

    return user && user.isActive ? user : null;
  }

  async changePassword(
    userId: string,
    currentPassword: string,
    newPassword: string,
  ): Promise<void> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
    });

    if (!user) {
      throw new NotFoundException('User not found');
    }

    const isCurrentPasswordValid = await user.validatePassword(currentPassword);
    if (!isCurrentPasswordValid) {
      throw new UnauthorizedException('Current password is incorrect');
    }

    user.password_hash = await bcrypt.hash(newPassword, 12);
    await this.userRepository.save(user);
  }

  async requestPasswordReset(email: string): Promise<void> {
    const user = await this.userRepository.findOne({ where: { email } });
    
    if (!user) {
      // Don't reveal if email exists
      return;
    }

    // TODO: Implement password reset logic
    // 1. Generate reset token
    // 2. Send email with reset link
    // 3. Store token with expiration
    
    console.log(`Password reset requested for ${email}`);
  }

  async resetPassword(token: string, newPassword: string): Promise<void> {
    // TODO: Implement password reset logic
    // 1. Validate reset token
    // 2. Find user by token
    // 3. Update password
    // 4. Invalidate token
    
    throw new Error('Password reset not implemented yet');
  }

  private async generateTokens(user: User): Promise<{
    access_token: string;
    refresh_token: string;
  }> {
    const payload = { sub: user.id, email: user.email, role: user.role };

    const access_token = this.jwtService.sign(payload, {
      secret: this.configService.get('JWT_SECRET'),
      expiresIn: this.configService.get('JWT_EXPIRES_IN', '15m'),
    });

    const refresh_token = this.jwtService.sign(payload, {
      secret: this.configService.get('JWT_REFRESH_SECRET'),
      expiresIn: this.configService.get('JWT_REFRESH_EXPIRES_IN', '7d'),
    });

    return { access_token, refresh_token };
  }

  private sanitizeUser(user: User): Partial<User> {
    const { password_hash, ...sanitized } = user;
    return sanitized;
  }

  // Admin methods
  async createAdminUser(userData: {
    name: string;
    email: string;
    phone: string;
    password: string;
  }): Promise<User> {
    const existingUser = await this.userRepository.findOne({
      where: [{ email: userData.email }, { phone: userData.phone }],
    });

    if (existingUser) {
      throw new ConflictException('Admin user already exists');
    }

    const user = this.userRepository.create({
      ...userData,
      password_hash: userData.password,
      role: UserRole.ADMIN,
      status: UserStatus.ACTIVE,
    });

    return this.userRepository.save(user);
  }

  async getUserStats(userId: string): Promise<{
    total_orders: number;
    completed_orders: number;
    success_rate: number;
    total_earnings: number;
  }> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
      relations: ['courier'],
    });

    if (!user?.courier) {
      throw new NotFoundException('Courier not found');
    }

    return {
      total_orders: user.courier.completed_deliveries + user.courier.cancelled_deliveries,
      completed_orders: user.courier.completed_deliveries,
      success_rate: user.courier.successRate,
      total_earnings: Number(user.courier.total_earnings),
    };
  }
}

import {
  Controller,
  Post,
  Get,
  Body,
  Query,
  Headers,
  RawBodyRequest,
  Request,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';

import { WhatsappService } from './whatsapp.service';

@ApiTags('WhatsApp')
@Controller('whatsapp')
export class WhatsappController {
  private readonly logger = new Logger(WhatsappController.name);

  constructor(private readonly whatsappService: WhatsappService) {}

  @Get('webhook')
  @ApiOperation({ summary: 'Verify WhatsApp webhook' })
  @ApiResponse({ status: 200, description: 'Webhook verified successfully' })
  @ApiResponse({ status: 400, description: 'Invalid verification parameters' })
  verifyWebhook(
    @Query('hub.mode') mode: string,
    @Query('hub.verify_token') token: string,
    @Query('hub.challenge') challenge: string,
  ): string {
    this.logger.log(`Webhook verification request: mode=${mode}, token=${token}`);
    
    const result = this.whatsappService.verifyWebhook(mode, token, challenge);
    
    if (!result) {
      throw new BadRequestException('Invalid verification parameters');
    }
    
    return result;
  }

  @Post('webhook')
  @ApiOperation({ summary: 'Receive WhatsApp webhook events' })
  @ApiResponse({ status: 200, description: 'Webhook processed successfully' })
  async receiveWebhook(
    @Request() req: RawBodyRequest<Request>,
    @Body() body: any,
    @Headers('x-hub-signature-256') signature: string,
  ): Promise<{ status: string }> {
    try {
      this.logger.log('Received WhatsApp webhook event');
      this.logger.debug('Webhook payload:', JSON.stringify(body, null, 2));
      
      const rawBody = req.rawBody?.toString('utf8') || JSON.stringify(body);
      
      await this.whatsappService.handleWebhook(body, signature, rawBody);
      
      return { status: 'ok' };
    } catch (error) {
      this.logger.error('Error processing WhatsApp webhook:', error);
      
      // Always return 200 to prevent WhatsApp from retrying
      return { status: 'error' };
    }
  }

  @Post('send-message')
  @ApiOperation({ summary: 'Send a WhatsApp message (for testing)' })
  @ApiResponse({ status: 200, description: 'Message sent successfully' })
  async sendTestMessage(
    @Body() body: { phone: string; message: string },
  ): Promise<{ status: string; message: string }> {
    try {
      await this.whatsappService.sendMessage(body.phone, body.message);
      
      return {
        status: 'success',
        message: 'Message sent successfully',
      };
    } catch (error) {
      this.logger.error('Error sending test message:', error);
      
      return {
        status: 'error',
        message: error.message,
      };
    }
  }
}
